"
I represent the Javascript Error type.
"
Class {
	#name : #PjError,
	#superclass : #PjObject,
	#traits : 'PjTExtensionClass',
	#classTraits : 'PjTExtensionClass classTrait',
	#instVars : [
		'message'
	],
	#category : #'PharoJsCoreLibraries-Kernel'
}

{ #category : #'initialization-release' }
PjError class >> javascriptInitialize [
	self instVarNamed: #stackTraceLimit put: 100 
]

{ #category : #'pharoJs support' }
PjError class >> jsTranspilationImportMethods [

	<pharoJsSkip>
	^ { (Exception -> #( "defaultDescription" description )) }
]

{ #category : #'instance creation' }
PjError class >> signal [
	^self new signal
]

{ #category : #'instance creation' }
PjError class >> signal: aString [
	^self new signal: aString
]

{ #category : #'accessing - defaults' }
PjError >> defaultDescription [

	"Return a textual description of the exception."

	^ String streamContents: [ :stream | 
		  | mt |
		console log: stream.
		  stream << self class name.
		console log: stream.
		  (mt := self messageText) isEmptyOrNil ifFalse: [ 
		console log: stream.
			  stream << ': ' << mt ] ]
]

{ #category : #accessing }
PjError >> messageText [
	^ message
]

{ #category : #accessing }
PjError >> messageText: anObject [
	message := anObject
]

{ #category : #signaling }
PjError >> signal [
	<javascript: 'throw this'>
]

{ #category : #signaling }
PjError >> signal: aString [
	self messageText: aString.
	^self signal.
]
